(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{468:function(v,_,t){"use strict";t.r(_);var r=t(1),s=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"聊聊软件架构设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#聊聊软件架构设计"}},[v._v("#")]),v._v(" 聊聊软件架构设计")]),v._v(" "),_("p",[v._v("单体架构、微服务架构和分布式系统是软件开发中常见的架构模式，三者在设计理念、应用场景和实现方式上有显著区别，但也存在紧密联系。")]),v._v(" "),_("p",[v._v("以下从定义、区别、联系和适用场景进行解析：")]),v._v(" "),_("h2",{attrs:{id:"一、核心定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、核心定义"}},[v._v("#")]),v._v(" "),_("strong",[v._v("一、核心定义")])]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("单体架构（Monolithic）")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("定义")]),v._v("：将所有功能模块（如用户管理、订单处理、支付等）集中在一个代码库中，统一部署为一个独立进程。")]),v._v(" "),_("li",[_("strong",[v._v("特点")]),v._v("：简单直接，开发、测试和部署成本低，适合小型项目或初期原型开发。")]),v._v(" "),_("li",[_("strong",[v._v("示例")]),v._v("：传统的 Java Web 应用（Spring MVC + MySQL），所有代码打包成一个 WAR 文件部署在 Tomcat 中。（这是传统的情况，基本废弃）")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("微服务架构（Microservices）")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("定义")]),v._v("：将单一应用拆分为多个小型服务，每个服务独立开发、部署和运行，通过轻量级通信（如HTTP/gRPC）协作。")]),v._v(" "),_("li",[_("strong",[v._v("特点")]),v._v("：高内聚、低耦合，支持技术异构性，适合复杂业务和快速迭代需求。")]),v._v(" "),_("li",[_("strong",[v._v("示例")]),v._v("：电商平台拆分为订单服务、用户服务、库存服务等，每个服务独立运行。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("分布式系统（Distributed System）")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("定义")]),v._v("：多个物理或虚拟节点通过网络协作完成任务，对外表现为单一整体。服务/组件可跨节点部署。")]),v._v(" "),_("li",[_("strong",[v._v("特点")]),v._v("：高可用性、横向扩展能力强，需解决网络延迟、数据一致性等问题。")]),v._v(" "),_("li",[_("strong",[v._v("示例")]),v._v("：微服务集群部署在多个服务器上，或使用 Kubernetes 进行容器编排。")])])])]),v._v(" "),_("h2",{attrs:{id:"二、核心区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、核心区别"}},[v._v("#")]),v._v(" "),_("strong",[v._v("二、核心区别")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("维度")])]),v._v(" "),_("th",[_("strong",[v._v("单体架构")])]),v._v(" "),_("th",[_("strong",[v._v("微服务架构")])]),v._v(" "),_("th",[_("strong",[v._v("分布式系统")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[v._v("部署方式")])]),v._v(" "),_("td",[v._v("单一进程/服务")]),v._v(" "),_("td",[v._v("多个独立服务")]),v._v(" "),_("td",[v._v("多节点协同（服务/数据分散）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("通信机制")])]),v._v(" "),_("td",[v._v("内部函数调用")]),v._v(" "),_("td",[v._v("HTTP/gRPC/消息队列（跨服务）")]),v._v(" "),_("td",[v._v("节点间网络通信（可能跨地域）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("复杂度")])]),v._v(" "),_("td",[v._v("低")]),v._v(" "),_("td",[v._v("高（需治理服务依赖）")]),v._v(" "),_("td",[v._v("极高（需处理网络分区、一致性）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("扩展性")])]),v._v(" "),_("td",[v._v("纵向扩展（升级硬件）")]),v._v(" "),_("td",[v._v("按服务独立扩展")]),v._v(" "),_("td",[v._v("横向扩展（弹性扩容）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("容错性")])]),v._v(" "),_("td",[v._v("单点故障影响全局")]),v._v(" "),_("td",[v._v("故障隔离，局部影响")]),v._v(" "),_("td",[v._v("容错设计复杂（如副本机制）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("开发效率")])]),v._v(" "),_("td",[v._v("初期快，后期维护难")]),v._v(" "),_("td",[v._v("团队可并行开发")]),v._v(" "),_("td",[v._v("依赖基础设施（如CI/CD、监控）")])])])]),v._v(" "),_("h2",{attrs:{id:"三、核心联系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、核心联系"}},[v._v("#")]),v._v(" "),_("strong",[v._v("三、核心联系")])]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("微服务与分布式的关系")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("微服务是"),_("strong",[v._v("分布式系统的一种实现形式")]),v._v("，但并非所有分布式系统都是微服务。")]),v._v(" "),_("li",[v._v("微服务强调服务拆分和独立性，而分布式更侧重节点间的协作和数据分布。")]),v._v(" "),_("li",[_("strong",[v._v("示例")]),v._v("：微服务集群部署在多个服务器（分布式）；传统单体应用通过负载均衡集群部署（分布式但非微服务）。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("单体与微服务/分布式的演进")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("单体架构是起点，随着业务复杂度增加，可能演进为微服务，最终形成分布式系统。")]),v._v(" "),_("li",[_("strong",[v._v("演进路径")]),v._v("：单体 → 模块化单体 → 微服务（进程级拆分） → 分布式集群。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("技术依赖")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("微服务常用分布式技术（如服务发现、配置中心），但分布式系统可能不涉及服务拆分（如 Hadoop 大数据集群）。")])])])]),v._v(" "),_("h2",{attrs:{id:"四、适用场景对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、适用场景对比"}},[v._v("#")]),v._v(" "),_("strong",[v._v("四、适用场景对比")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("场景")])]),v._v(" "),_("th",[_("strong",[v._v("推荐架构")])]),v._v(" "),_("th",[_("strong",[v._v("原因")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("初创项目或小型系统")]),v._v(" "),_("td",[v._v("单体架构")]),v._v(" "),_("td",[v._v("快速开发、低成本，避免过度设计")])]),v._v(" "),_("tr",[_("td",[v._v("中大型复杂业务系统")]),v._v(" "),_("td",[v._v("微服务架构")]),v._v(" "),_("td",[v._v("按业务解耦，支持独立迭代，适应快速变化")])]),v._v(" "),_("tr",[_("td",[v._v("高并发、高可用需求")]),v._v(" "),_("td",[v._v("分布式系统")]),v._v(" "),_("td",[v._v("横向扩展、容灾备份（如全球部署的电商、社交平台）")])]),v._v(" "),_("tr",[_("td",[v._v("大数据处理")]),v._v(" "),_("td",[v._v("分布式系统（非微服务）")]),v._v(" "),_("td",[v._v("Hadoop/Spark 等框架通过分布式计算处理海量数据")])])])]),v._v(" "),_("h2",{attrs:{id:"五、典型问题与挑战"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、典型问题与挑战"}},[v._v("#")]),v._v(" "),_("strong",[v._v("五、典型问题与挑战")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("单体架构")]),v._v("：代码臃肿、技术栈固化、扩展受限。")]),v._v(" "),_("li",[_("strong",[v._v("微服务架构")]),v._v("：服务治理（如注册发现、熔断）、数据一致性（分布式事务）、调试复杂。")]),v._v(" "),_("li",[_("strong",[v._v("分布式系统")]),v._v("：CAP 权衡（一致性/可用性/分区容忍）、网络延迟、运维成本。")])]),v._v(" "),_("blockquote",[_("p",[v._v("CAP 理论是分布式系统设计中的一个基础概念，它指出任何分布式系统最多只能同时满足以下三个特性中的两个：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("一致性（Consistency）")]),v._v("：每个读操作都能获取到最新写入的数据。换句话说，在分布式系统中进行数据读取时，所有节点上获取到的数据都是最新的、一致的。")]),v._v(" "),_("li",[_("strong",[v._v("可用性（Availability）")]),v._v("：系统服务一直保持可用状态，对于用户的每一个操作请求，系统总能在有限时间内返回结果。即使部分节点失效，系统仍然能够处理客户端的请求。")]),v._v(" "),_("li",[_("strong",[v._v("分区容忍性（Partition Tolerance）")]),v._v("：即使网络分区发生（即系统被分割成多个无法互相通信的部分），系统仍能继续运行。这意味着系统能够在网络故障或延迟的情况下继续提供服务。")])]),v._v(" "),_("p",[v._v("CAP 理论表明，在设计分布式系统时，必须在这三个属性之间做出权衡，因为不可能同时完全满足这三者。例如：")]),v._v(" "),_("ul",[_("li",[v._v("如果一个系统选择了保证一致性和可用性，那么在网络分区发生时，可能无法确保系统的正常运作。")]),v._v(" "),_("li",[v._v("如果选择了一致性和分区容忍性，则在网络分区情况下，为了保证数据的一致性，系统可能需要牺牲某些节点的可用性。")]),v._v(" "),_("li",[v._v("若选择了可用性和分区容忍性，系统可以在网络分区时继续运行并处理请求，但可能无法保证所有节点上的数据是一致的，直到网络恢复并且数据同步完成。")])])]),v._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" "),_("strong",[v._v("总结")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("单体")]),v._v("是基础，适合简单场景；"),_("strong",[v._v("微服务")]),v._v("是解耦利器，但需承担复杂度；"),_("strong",[v._v("分布式")]),v._v("是规模化手段，需解决分布式难题。")]),v._v(" "),_("li",[v._v("实际中三者常融合：例如微服务通过分布式集群部署实现高可用，单体应用通过分布式缓存提升性能。")])]),v._v(" "),_("p",[v._v("选择架构需结合业务规模、团队能力和技术目标，避免盲目追求“先进架构”。")]),v._v(" "),_("h2",{attrs:{id:"什么是-saas"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-saas"}},[v._v("#")]),v._v(" 什么是 SaaS？")]),v._v(" "),_("p",[_("strong",[v._v("SaaS（Software as a Service）")]),v._v(" 是一种"),_("em",[v._v("基于云计算的软件交付模式")]),v._v("，用户"),_("strong",[v._v("无需下载安装和维护软件")]),v._v("，只需通过浏览器等客户端即可按需访问软件功能。")]),v._v(" "),_("ul",[_("li",[v._v("高效率，低成本")])]),v._v(" "),_("p",[v._v("SaaS 提供商负责软件的部署、维护、升级与安全。")]),v._v(" "),_("p",[v._v("常见例子：")]),v._v(" "),_("ul",[_("li",[v._v("企业级：Salesforce（CRM）、Workday（HR）、SAP S/4HANA Cloud（ERP）")]),v._v(" "),_("li",[v._v("通用型：Google Workspace、Microsoft 365、Zoom、Notion、Trello")])]),v._v(" "),_("h3",{attrs:{id:"saas-的主要特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#saas-的主要特性"}},[v._v("#")]),v._v(" SaaS 的主要特性")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("特性")]),v._v(" "),_("th",[v._v("描述")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[v._v("多租户架构")]),v._v("（Multi-Tenancy）")]),v._v(" "),_("td",[v._v("多个客户（租户）共享同一套应用程序和基础设施，但数据隔离")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("按需计费")])]),v._v(" "),_("td",[v._v("基于用户数量、功能模块或使用时长进行计费（订阅制）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("可扩展性强")])]),v._v(" "),_("td",[v._v("支持水平扩展（用户增长不需额外部署），快速适应业务发展")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("无需安装维护")])]),v._v(" "),_("td",[v._v("用户免运维，服务商负责更新、安全、性能优化等")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("统一部署、集中管理")])]),v._v(" "),_("td",[v._v("所有用户共享统一版本，版本控制与升级更容易")])])])])])}),[],!1,null,null,null);_.default=s.exports}}]);
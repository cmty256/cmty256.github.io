(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{346:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"java-泛型核心知识总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-泛型核心知识总结"}},[s._v("#")]),s._v(" Java 泛型核心知识总结")]),s._v(" "),t("h2",{attrs:{id:"泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[s._v("#")]),s._v(" 泛型")]),s._v(" "),t("h3",{attrs:{id:"什么是泛型-有什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是泛型-有什么用"}},[s._v("#")]),s._v(" 什么是泛型？有什么用？")]),s._v(" "),t("p",[s._v("Java 泛型(Generics)是 JDK 5 中引入的一个新特性，它"),t("strong",[s._v("提供了一种类型安全的编程机制")]),s._v("，可以在编译时检查类型错误，避免了在运行时出现类型转换异常的情况。它"),t("strong",[s._v("可以使程序员在编写代码时指定类型参数")]),s._v("，从而使得代码更加灵活和可重用。")]),s._v(" "),t("p",[s._v("比如 "),t("code",[s._v("ArrayList<Persion> persons = new ArrayListPersion>()")]),s._v(" 这行代码就指明了该 "),t("code",[s._v("ArrayList")]),s._v(" 对象只能传入 "),t("code",[s._v("Persion")]),s._v(" 对象，如果传入其他类型的对象就会报错。")]),s._v(" "),t("p",[s._v("类型参数 "),t("code",[s._v("T")]),s._v(" 是一种占位符类型，用于表示实际的类型。")]),s._v(" "),t("blockquote",[t("p",[s._v("一般在哪定义？")])]),s._v(" "),t("p",[s._v("Java 泛型可以用于"),t("strong",[s._v("类、接口和方法")]),s._v("的定义中。")]),s._v(" "),t("p",[s._v("三种使用方式：泛型类、泛型接口、泛型方法。")]),s._v(" "),t("blockquote",[t("p",[s._v("使用泛型有什么好处？")])]),s._v(" "),t("p",[s._v("简单来说，使用泛型参数，可以增强代码的可读性以及稳定性。")]),s._v(" "),t("p",[s._v("使用泛型可以带来许多好处，比如：")]),s._v(" "),t("ul",[t("li",[s._v("类型安全：Java 泛型可以在编译时检查类型错误，避免了在运行时出现类型转换异常的情况。")]),s._v(" "),t("li",[s._v("代码重用：泛型可以使代码更加通用和模块化，可以重用在不同的场景中。")]),s._v(" "),t("li",[s._v("更好的性能：泛型可以避免不必要的类型转换和装箱操作，从而提高代码的性能。")])]),s._v(" "),t("blockquote",[t("p",[s._v("泛型的实现方式？")])]),s._v(" "),t("p",[s._v("泛型主要通过以下两种方式来实现：")]),s._v(" "),t("ul",[t("li",[s._v("参数化类型和通配符类型。")])]),s._v(" "),t("h3",{attrs:{id:"泛型有哪些限制-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型有哪些限制-为什么"}},[s._v("#")]),s._v(" 泛型有哪些限制？为什么？")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("泛型参数 "),t("code",[s._v("<T>")]),s._v(" 不能是基本类型，例如 "),t("code",[s._v("int")]),s._v("，因为实际类型是 "),t("code",[s._v("Object")]),s._v("，"),t("code",[s._v("Object")]),s._v(" 类型无法持有基本类型。")]),s._v(" "),t("ul",[t("li",[s._v("Java 的泛型是"),t("strong",[s._v("基于类型擦除")]),s._v("的，编译后泛型信息会被擦除，T 变成 "),t("code",[s._v("Object")]),s._v("。")]),s._v(" "),t("li",[s._v("但 "),t("code",[s._v("Object")]),s._v(" 不能直接存储 "),t("code",[s._v("int")]),s._v("，只能存储 "),t("code",[s._v("Integer")]),s._v("。")]),s._v(" "),t("li",[s._v("解决方案：使用包装类，如 "),t("code",[s._v("Integer")]),s._v(" 而不是 "),t("code",[s._v("int")]),s._v("。")])])]),s._v(" "),t("li",[t("p",[s._v("无法取得带泛型的 "),t("code",[s._v("Class")]),s._v("。（"),t("code",[s._v("getClass()")]),s._v("）")]),s._v(" "),t("ul",[t("li",[s._v("泛型类型在运行时会被"),t("strong",[s._v("擦除")]),s._v("，比如 "),t("code",[s._v("List<String>")]),s._v(" 和 "),t("code",[s._v("List<Integer>")]),s._v(" 运行时都变成 "),t("code",[s._v("List")]),s._v("，所以 "),t("code",[s._v("getClass()")]),s._v(" 无法区分不同泛型类型。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("无法判断带泛型的类型")]),s._v("（"),t("code",[s._v("instanceof")]),s._v(" 判断会出错）。")]),s._v(" "),t("ul",[t("li",[s._v("由于泛型擦除，所有泛型类型在运行时都被视为 "),t("code",[s._v("Object")]),s._v("，无法进行精确的 "),t("code",[s._v("instanceof")]),s._v(" 判断。")]),s._v(" "),t("li",[s._v("可以判断是否为 "),t("code",[s._v("List")]),s._v("，但无法判断 "),t("code",[s._v("T")]),s._v(" 的类型，例如 "),t("code",[s._v("list instanceof List<String>")]),s._v(" 不能这样判断")])])]),s._v(" "),t("li",[t("p",[s._v("不能实例化泛型参数的数组。因为擦除后为 "),t("code",[s._v("object")]),s._v(" 后无法进行类型判断。")]),s._v(" "),t("ul",[t("li",[t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ❌ 无法创建泛型数组")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("由于"),t("strong",[s._v("类型擦除")]),s._v("，JVM 无法知道数组的具体类型，导致无法创建安全的泛型数组。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Java 数组是协变的")]),s._v("，意味着 "),t("code",[s._v("String[]")]),s._v(" 是 "),t("code",[s._v("Object[]")]),s._v(" 的子类，而泛型是"),t("strong",[s._v("不协变")]),s._v("的（"),t("code",[s._v("List<String>")]),s._v(" 不是 "),t("code",[s._v("List<Object>")]),s._v("）。")])])])]),s._v(" "),t("li",[t("p",[s._v("不能实现两个不同泛型参数的同一接口，擦除后多个父类的桥方法将冲突。")]),s._v(" "),t("ul",[t("li",[s._v("泛型擦除后，多个接口的方法签名可能冲突，导致无法区分。")])])]),s._v(" "),t("li",[t("p",[s._v("不能使用 "),t("code",[s._v("static")]),s._v(" 修饰泛型变量。")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("泛型是属于实例的，而 "),t("code",[s._v("static")]),s._v(" 变量属于类，所有实例共享")]),s._v("，如果 "),t("code",[s._v("static")]),s._v(" 变量使用泛型，会导致类型不安全。")])]),s._v(" "),t("li",[t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ❌ 编译错误")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 static 需要泛型，应该独立声明")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ✅ 静态方法可以使用独立泛型")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])])])])]),s._v(" "),t("li",[t("p",[s._v("泛型数组的限制：Java 泛型数组的创建和使用受到一些限制，例如无法创建泛型数组、无法向泛型数组中添加元素等。")]),s._v(" "),t("ul",[t("li",[s._v("由于"),t("strong",[s._v("类型擦除")]),s._v("，泛型数组不能保证类型安全，无法创建泛型数组。")]),s._v(" "),t("li",[t("strong",[s._v("无法安全地向泛型数组添加元素")]),s._v("，因为 Java 运行时不会记录泛型类型。")])])])]),s._v(" "),t("p",[t("strong",[s._v("总结")]),s._v("：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("限制")]),s._v(" "),t("th",[s._v("原因")]),s._v(" "),t("th",[s._v("解决方案")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v("不能使用基本类型（如 "),t("code",[s._v("int")]),s._v("）")])]),s._v(" "),t("td",[s._v("类型擦除后变成 "),t("code",[s._v("Object")]),s._v("，"),t("code",[s._v("Object")]),s._v(" 不能存储 "),t("code",[s._v("int")])]),s._v(" "),t("td",[s._v("用包装类 "),t("code",[s._v("Integer")]),s._v(" 代替")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("无法获取带泛型的 "),t("code",[s._v("Class")])])]),s._v(" "),t("td",[s._v("类型擦除后 "),t("code",[s._v("List<String>")]),s._v(" 和 "),t("code",[s._v("List<Integer>")]),s._v(" 运行时相同")]),s._v(" "),t("td",[s._v("不能区分泛型类型")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("不能用 "),t("code",[s._v("instanceof")]),s._v(" 判断泛型类型")])]),s._v(" "),t("td",[s._v("类型擦除后泛型类型变成 "),t("code",[s._v("Object")])]),s._v(" "),t("td",[s._v("只能判断是否是 "),t("code",[s._v("List")]),s._v("，不能判断 "),t("code",[s._v("List<String>")])])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("不能创建泛型数组")])]),s._v(" "),t("td",[s._v("JVM 无法检查泛型数组类型")]),s._v(" "),t("td",[s._v("用 "),t("code",[s._v("List<T>")]),s._v(" 代替数组")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("不能实现多个不同泛型参数的同一接口")])]),s._v(" "),t("td",[s._v("类型擦除后方法签名冲突")]),s._v(" "),t("td",[s._v("避免同时实现多个不同泛型的同一接口")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("不能在 "),t("code",[s._v("static")]),s._v(" 方法或变量中使用泛型参数")])]),s._v(" "),t("td",[t("code",[s._v("static")]),s._v(" 变量是共享的，而泛型是实例级的")]),s._v(" "),t("td",[s._v("让 "),t("code",[s._v("static")]),s._v(" 方法自己定义泛型")])])])]),s._v(" "),t("h3",{attrs:{id:"项目中哪里用到了泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目中哪里用到了泛型"}},[s._v("#")]),s._v(" 项目中哪里用到了泛型？")]),s._v(" "),t("p",[s._v("比如：")]),s._v(" "),t("ul",[t("li",[s._v("自定义接口通用返回结果类 "),t("code",[s._v("CommonResult<T>")]),s._v(" "),t("strong",[s._v("通过参数 "),t("code",[s._v("T")]),s._v(" 可根据具体的返回类型动态指定结果的数据类型")]),s._v("。")]),s._v(" "),t("li",[s._v("定义 "),t("code",[s._v("Excel")]),s._v(" 处理类 "),t("code",[s._v("ExcelUtil<T>")]),s._v(" "),t("strong",[s._v("用于动态指定 "),t("code",[s._v("Excel")]),s._v(" 导出的数据类型")]),s._v("。")]),s._v(" "),t("li",[s._v("构建集合工具类（参考 "),t("code",[s._v("Collections")]),s._v(" 中的 "),t("code",[s._v("sort")]),s._v(", "),t("code",[s._v("binarySearch")]),s._v(" 方法）。")])]),s._v(" "),t("h3",{attrs:{id:"什么是类型擦除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是类型擦除"}},[s._v("#")]),s._v(" 什么是类型擦除？")]),s._v(" "),t("p",[s._v("类型擦除是指"),t("strong",[s._v("在 Java 编译器将泛型代码编译成字节码时，会将泛型类型擦除，替换为实际的类型或者 "),t("code",[s._v("Object")]),s._v(" 类型，从而使得泛型类型在运行时不存在")]),s._v("。")]),s._v(" "),t("p",[s._v("注意：是【实际的类型】或者 【"),t("code",[s._v("Object")]),s._v("】类型。")]),s._v(" "),t("blockquote",[t("p",[s._v("为什么要擦除？")])]),s._v(" "),t("p",[s._v("这是因为 Java 虚拟机并不支持泛型，所以需要在编译期对泛型进行擦除，将泛型代码转换为普通的 Java 类型。")]),s._v(" "),t("p",[s._v("比如：")]),s._v(" "),t("p",[s._v("泛型类型没有定义类型参数的限定类型的情况：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("对于上面的 "),t("code",[s._v("MyList<T>")]),s._v(" 类，实际上"),t("strong",[s._v("编译器会将其擦除成如下形式")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("在运行时，我们无法获取泛型类型的类型参数，例如 无法获取 "),t("code",[s._v("MyList<String>")]),s._v(" 和 "),t("code",[s._v("MyList<Integer>")]),s._v(" 的类型参数，它们都被擦除为 MyList 类型。")]),s._v(" "),t("h3",{attrs:{id:"什么是桥方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是桥方法"}},[s._v("#")]),s._v(" 什么是桥方法？")]),s._v(" "),t("p",[s._v("桥方法（Bridge Method）是 Java 泛型类型擦除机制的一种补偿措施。它是指在泛型类或泛型接口中，"),t("strong",[s._v("由编译器自动生成的一个方法，用于在类型擦除后保持多态性")]),s._v("。")]),s._v(" "),t("p",[s._v("具体说明：")]),s._v(" "),t("p",[s._v("在 Java 泛型中，由于类型擦除机制的存在，导致在某些情况下，泛型类型的继承关系会被破坏。")]),s._v(" "),t("p",[s._v("例如下面的代码：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("假设我们定义了一个子类：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyStringList")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("由于类型擦除机制的存在，"),t("code",[s._v("MyStringList")]),s._v(" 类实际上是继承自 "),t("code",[s._v("MyList")]),s._v(" 类的原始类型，而不是继承自 "),t("code",[s._v("MyList<String>")]),s._v(" 类型。")]),s._v(" "),t("p",[s._v("因此，如果我们在 "),t("code",[s._v("MyStringList")]),s._v(" 类中定义一个重写 "),t("code",[s._v("add()")]),s._v(" 方法的话，会出现编译错误：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyStringList")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("这是因为 "),t("strong",[s._v("Java 编译器会将 "),t("code",[s._v("MyStringList")]),s._v(" 类中的 "),t("code",[s._v("add()")]),s._v(" 方法擦除成如下形式")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("这个方法的参数类型是 "),t("code",[s._v("Object")]),s._v("，与 "),t("code",[s._v("MyList<String>")]),s._v(" 中的 "),t("code",[s._v("add")]),s._v(" 方法的参数类型不同，因此编译器会报错。")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("为了解决这个问题，Java 编译器会在 MyStringList 类中自动生成一个桥方法，用于在类型擦除后保持多态性：")])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyStringList")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("在上面的代码中，编译器会自动生成一个桥方法 "),t("code",[s._v("add(Object element)")]),s._v("，"),t("strong",[s._v("它会调用原始方法 "),t("code",[s._v("add(String element)")]),s._v("，从而保持多态性")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[s._v("#")]),s._v(" 通配符")]),s._v(" "),t("h3",{attrs:{id:"什么是通配符-有什么作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是通配符-有什么作用"}},[s._v("#")]),s._v(" 什么是通配符？有什么作用？")]),s._v(" "),t("p",[s._v("泛型类型是固定的，某些场景下使用起来不太灵活，于是，通配符就来了！")]),s._v(" "),t("p",[t("strong",[s._v("通配符可以允许类型参数变化，用来解决泛型无法协变的问题。")])]),s._v(" "),t("p",[s._v("举个例子:")]),s._v(" "),t("div",{staticClass:"language-Java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 限制类型为 Person 的子类")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 限制类型为 Manager 的父类")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Manager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"通配符-和常用的泛型-t-之间有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通配符-和常用的泛型-t-之间有什么区别"}},[s._v("#")]),s._v(" 通配符 ? 和常用的泛型 T 之间有什么区别?")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("T")]),s._v(" 可以用于声明变量或常量，而 "),t("code",[s._v("?")]),s._v(" 不行。")]),s._v(" "),t("li",[t("code",[s._v("T")]),s._v(" 一般用于声明泛型类或方法，通配符 "),t("code",[s._v("?")]),s._v(" 一般用于泛型方法的调用代码和形参。")]),s._v(" "),t("li",[t("code",[s._v("T")]),s._v(" 在"),t("strong",[s._v("编译期")]),s._v("会被擦除为限定（实际）类型或 "),t("code",[s._v("object")]),s._v("，通配符用于捕获具体类型。")])]),s._v(" "),t("blockquote",[t("p",[s._v("擦除为限定（实际）类型是什么意思？")])]),s._v(" "),t("p",[s._v("1、如果泛型类型"),t("strong",[s._v("定义了类型参数的限定类型")]),s._v("，例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" elements"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("那么在编译时，编译器会将类型参数 "),t("code",[s._v("T")]),s._v(" 擦除为其限定类型 "),t("code",[s._v("Number")]),s._v("，例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" elements"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Number")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("因此，在运行时，无法获取泛型类型的类型参数 "),t("code",[s._v("T")]),s._v("，而只能获取其限定类型 "),t("code",[s._v("Number")]),s._v("。")]),s._v(" "),t("p",[s._v("2、如果泛型类型"),t("strong",[s._v("没有定义")]),s._v("类型参数的限定类型，例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" elements"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("那么在编译时，编译器会将类型参数 "),t("code",[s._v("T")]),s._v(" 擦除为 "),t("code",[s._v("Object")]),s._v(" 类型，例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyList")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" elements"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" element"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("因此，在运行时，无法获取泛型类型的类型参数 "),t("code",[s._v("T")]),s._v("，而只能获取其擦除后的类型 "),t("code",[s._v("Object")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"介绍一下常用的通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下常用的通配符"}},[s._v("#")]),s._v(" 介绍一下常用的通配符？")]),s._v(" "),t("p",[s._v("常用的通配符有三种：")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("<? extends T>")]),s._v(" ："),t("strong",[s._v("上边界通配符")]),s._v(" "),t("code",[s._v("extends")]),s._v("，表示该泛型必须是 T 的子类（包括 T 本身），用于限定泛型的上界。")]),s._v(" "),t("li",[t("code",[s._v("<? super Integer>")]),s._v("："),t("strong",[s._v("下边界通配符")]),s._v(" "),t("code",[s._v("super")]),s._v("，表示该泛型必须是 T 的父类（包括 T 本身），用于限定泛型的下界。")]),s._v(" "),t("li",[t("code",[s._v("<?>")]),s._v("："),t("strong",[s._v("无限定通配符")]),s._v(" "),t("code",[s._v("?")]),s._v("，表示任意类型，用于表示不确定的类型参数。无限定通配符 "),t("code",[s._v("<?>")]),s._v(" 很少使用，可以用 "),t("code",[s._v("<T>")]),s._v(" 替换，同时它是所有 "),t("code",[s._v("<T>")]),s._v(" 类型的父类。")])]),s._v(" "),t("h2",{attrs:{id:"学习参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习参考"}},[s._v("#")]),s._v(" 学习参考")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/XiiX/p/14719568.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("一文搞懂泛型"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);
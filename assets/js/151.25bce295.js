(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{479:function(v,t,_){"use strict";_.r(t);var r=_(1),s=Object(r.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"设计模式基础入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式基础入门"}},[v._v("#")]),v._v(" 设计模式基础入门")]),v._v(" "),t("blockquote",[t("p",[v._v("视频课程地址："),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1G4411c7N4?p=1&vd_source=d130139a92227a66fb558961b98507cb",target:"_blank",rel:"noopener noreferrer"}},[v._v("001-尚硅谷-设计模式-bilibili"),t("OutboundLink")],1)])]),v._v(" "),t("h2",{attrs:{id:"七大原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七大原则"}},[v._v("#")]),v._v(" 七大原则")]),v._v(" "),t("ol",[t("li",[v._v("单一职责原则")]),v._v(" "),t("li",[v._v("接口隔离原则")]),v._v(" "),t("li",[v._v("依赖倒转原则")]),v._v(" "),t("li",[v._v("里氏替换原则")]),v._v(" "),t("li",[v._v("开闭原则 ocp")]),v._v(" "),t("li",[v._v("迪米特法则（最少知道原则）")]),v._v(" "),t("li",[v._v("合成复用原则")])]),v._v(" "),t("h2",{attrs:{id:"设计模式的重要性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的重要性"}},[v._v("#")]),v._v(" 设计模式的重要性")]),v._v(" "),t("p",[v._v("软件工程中，"),t("strong",[v._v("设计模式")]),v._v("是对软件设计中**普遍存在（反复出现）**的各种问题，所提出的解决方案。")]),v._v(" "),t("h2",{attrs:{id:"设计模式在软件中哪里"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式在软件中哪里"}},[v._v("#")]),v._v(" 设计模式在软件中哪里？")]),v._v(" "),t("p",[v._v("面向对象 -> 功能模块【设计模式 + 算法（数据结构）】 -> 框架【使用到多种设计模式】 -> 架构【服务器集群】")]),v._v(" "),t("h2",{attrs:{id:"三大类别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三大类别"}},[v._v("#")]),v._v(" 三大类别")]),v._v(" "),t("p",[v._v("设计模式主要分为三大类："),t("strong",[v._v("创建型模式（Creational Patterns）")]),v._v("、"),t("strong",[v._v("结构型模式（Structural Patterns）")]),v._v("、"),t("strong",[v._v("行为型模式（Behavioral Patterns）")]),v._v("，共23种经典设计模式。")]),v._v(" "),t("hr"),v._v(" "),t("h3",{attrs:{id:"🏗️-一、创建型模式-creational-patterns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏗️-一、创建型模式-creational-patterns"}},[v._v("#")]),v._v(" 🏗️ 一、创建型模式（Creational Patterns）")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("核心作用")]),v._v("：处理对象的创建，封装复杂的实例化过程，降低对象创建的复杂性，提供更灵活的创建方式。")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("设计模式")])]),v._v(" "),t("th",[t("strong",[v._v("目的")])]),v._v(" "),t("th",[t("strong",[v._v("特点")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("单例模式 (Singleton)")])]),v._v(" "),t("td",[v._v("确保一个类只有一个实例，并提供全局访问点")]),v._v(" "),t("td",[v._v("只有一个实例，节省资源，确保一致性")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("工厂方法模式 (Factory Method)")])]),v._v(" "),t("td",[v._v("定义一个创建对象的接口，让子类决定实例化哪个类")]),v._v(" "),t("td",[v._v("延迟实例化，扩展性强，符合开闭原则")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("抽象工厂模式 (Abstract Factory)")])]),v._v(" "),t("td",[v._v("提供创建一系列相关或依赖对象的接口，无需指定具体类")]),v._v(" "),t("td",[v._v("生成一组相关产品，保证产品一致性")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("建造者模式 (Builder)")])]),v._v(" "),t("td",[v._v("分步创建复杂对象，允许自由组合各部分")]),v._v(" "),t("td",[v._v("复杂对象分解，简化对象的创建过程")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("原型模式 (Prototype)")])]),v._v(" "),t("td",[v._v("通过克隆（复制）现有对象创建新对象")]),v._v(" "),t("td",[v._v("克隆对象，避免重复创建，效率高")])])])]),v._v(" "),t("p",[v._v("✅ "),t("strong",[v._v("应用场景")]),v._v("：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("单例模式")]),v._v("：数据库连接池、线程池、缓存。")]),v._v(" "),t("li",[t("strong",[v._v("工厂模式")]),v._v("：日志类、数据库驱动加载、解析器。")]),v._v(" "),t("li",[t("strong",[v._v("抽象工厂模式")]),v._v("：跨平台应用、UI 组件创建。")]),v._v(" "),t("li",[t("strong",[v._v("建造者模式")]),v._v("：复杂文档生成器、HTML 构建、SQL 语句拼接。")]),v._v(" "),t("li",[t("strong",[v._v("原型模式")]),v._v("：对象复制、场景重置、深拷贝与浅拷贝。")])]),v._v(" "),t("hr"),v._v(" "),t("h3",{attrs:{id:"🧱-二、结构型模式-structural-patterns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🧱-二、结构型模式-structural-patterns"}},[v._v("#")]),v._v(" 🧱 二、结构型模式（Structural Patterns）")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("核心作用")]),v._v("：处理类与类、对象与对象之间的组合与依赖，简化系统结构，提升代码复用性和扩展性。")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("设计模式")])]),v._v(" "),t("th",[t("strong",[v._v("目的")])]),v._v(" "),t("th",[t("strong",[v._v("特点")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("适配器模式 (Adapter)")])]),v._v(" "),t("td",[v._v("将不兼容的接口转换为可兼容的接口")]),v._v(" "),t("td",[v._v("兼容旧系统与新系统，扩展性强")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("桥接模式 (Bridge)")])]),v._v(" "),t("td",[v._v("将抽象和实现解耦，二者可以独立变化")]),v._v(" "),t("td",[v._v("实现和抽象分离，降低耦合，扩展方便")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("装饰器模式 (Decorator)")])]),v._v(" "),t("td",[v._v("动态为对象添加新的功能，无需修改其结构")]),v._v(" "),t("td",[v._v("透明扩展，灵活组合，遵循开闭原则")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("组合模式 (Composite)")])]),v._v(" "),t("td",[v._v("使一组对象与单个对象使用方式相同，形成树形结构")]),v._v(" "),t("td",[v._v("统一处理复杂结构，适用于层级关系")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("外观模式 (Facade)")])]),v._v(" "),t("td",[v._v("对外提供统一简化的接口，隐藏系统内部复杂性")]),v._v(" "),t("td",[v._v("简化客户端操作，降低系统复杂度")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("享元模式 (Flyweight)")])]),v._v(" "),t("td",[v._v("共享对象，减少大量相似对象带来的内存消耗")]),v._v(" "),t("td",[v._v("节省内存，适合大量重复对象场景")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("代理模式 (Proxy)")])]),v._v(" "),t("td",[v._v("为对象提供一个代理，控制对目标对象的访问")]),v._v(" "),t("td",[v._v("控制访问权限，延迟初始化，远程代理")])])])]),v._v(" "),t("p",[v._v("✅ "),t("strong",[v._v("应用场景")]),v._v("：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("适配器模式")]),v._v("：API 兼容、数据库兼容、类库适配。")]),v._v(" "),t("li",[t("strong",[v._v("桥接模式")]),v._v("：多维度变化的系统（如图形形状和颜色）。")]),v._v(" "),t("li",[t("strong",[v._v("装饰器模式")]),v._v("：动态增加日志、权限校验、数据加密。")]),v._v(" "),t("li",[t("strong",[v._v("组合模式")]),v._v("：文件系统、组织架构、菜单管理。")]),v._v(" "),t("li",[t("strong",[v._v("外观模式")]),v._v("：封装子系统，提供统一接口，如 Spring 容器。")]),v._v(" "),t("li",[t("strong",[v._v("享元模式")]),v._v("：缓存池、线程池、连接池、字符对象池。")]),v._v(" "),t("li",[t("strong",[v._v("代理模式")]),v._v("：权限控制、RPC 远程调用、AOP 切面。")])]),v._v(" "),t("hr"),v._v(" "),t("h3",{attrs:{id:"🔄-三、行为型模式-behavioral-patterns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🔄-三、行为型模式-behavioral-patterns"}},[v._v("#")]),v._v(" 🔄 三、行为型模式（Behavioral Patterns）")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("核心作用")]),v._v("：关注对象之间的通信和职责分配，处理类或对象之间的交互方式，降低耦合度，提高扩展性。")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("设计模式")])]),v._v(" "),t("th",[t("strong",[v._v("目的")])]),v._v(" "),t("th",[t("strong",[v._v("特点")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("策略模式 (Strategy)")])]),v._v(" "),t("td",[v._v("定义一系列算法，封装并使它们可以互换")]),v._v(" "),t("td",[v._v("算法独立，互不影响，符合开闭原则")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("模板方法模式 (Template Method)")])]),v._v(" "),t("td",[v._v("定义算法骨架，延迟子类实现某些步骤")]),v._v(" "),t("td",[v._v("固定流程，子类实现差异化，代码复用")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("观察者模式 (Observer)")])]),v._v(" "),t("td",[v._v("定义一种订阅机制，使对象间实现一对多的依赖通知")]),v._v(" "),t("td",[v._v("发布-订阅模型，事件驱动，解耦")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("迭代器模式 (Iterator)")])]),v._v(" "),t("td",[v._v("提供一种方法顺序访问集合内部元素，而不暴露其内部结构")]),v._v(" "),t("td",[v._v("分离遍历逻辑，支持多种遍历方式")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("责任链模式 (Chain of Responsibility)")])]),v._v(" "),t("td",[v._v("将请求沿着处理链传递，链上的每个对象可对请求进行处理或传递")]),v._v(" "),t("td",[v._v("动态处理请求，简化请求处理流程")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("命令模式 (Command)")])]),v._v(" "),t("td",[v._v("将请求封装为对象，支持命令的参数化与撤销")]),v._v(" "),t("td",[v._v("解耦请求与执行，命令可记录与回滚")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("备忘录模式 (Memento)")])]),v._v(" "),t("td",[v._v("保存对象的状态，允许恢复到先前状态")]),v._v(" "),t("td",[v._v("状态恢复，撤销操作，历史记录")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("状态模式 (State)")])]),v._v(" "),t("td",[v._v("允许对象在内部状态变化时，改变其行为")]),v._v(" "),t("td",[v._v("行为与状态解耦，状态转换灵活")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("中介者模式 (Mediator)")])]),v._v(" "),t("td",[v._v("通过中介者协调多个对象的通信，避免对象间直接依赖")]),v._v(" "),t("td",[v._v("降低复杂对象依赖，集中管理交互")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("解释器模式 (Interpreter)")])]),v._v(" "),t("td",[v._v("定义语言语法规则，解析并执行语法表达式")]),v._v(" "),t("td",[v._v("自定义语言解析，适合DSL解析")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("访问者模式 (Visitor)")])]),v._v(" "),t("td",[v._v("分离数据结构和操作，新增操作而不修改数据结构")]),v._v(" "),t("td",[v._v("数据与操作分离，扩展性强")])])])]),v._v(" "),t("p",[v._v("✅ "),t("strong",[v._v("应用场景")]),v._v("：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("策略模式")]),v._v("：支付方式、排序算法、验证码生成。")]),v._v(" "),t("li",[t("strong",[v._v("模板方法模式")]),v._v("：数据导入、网络爬虫、任务调度。")]),v._v(" "),t("li",[t("strong",[v._v("观察者模式")]),v._v("：消息通知、事件总线、发布订阅。")]),v._v(" "),t("li",[t("strong",[v._v("迭代器模式")]),v._v("：集合遍历、数据流处理、数据库游标。")]),v._v(" "),t("li",[t("strong",[v._v("责任链模式")]),v._v("：日志拦截、权限校验、审批流程。")]),v._v(" "),t("li",[t("strong",[v._v("命令模式")]),v._v("：事务操作、任务队列、日志记录。")]),v._v(" "),t("li",[t("strong",[v._v("备忘录模式")]),v._v("：撤销操作、游戏存档、历史记录。")]),v._v(" "),t("li",[t("strong",[v._v("状态模式")]),v._v("：订单状态、工作流、权限管理。")]),v._v(" "),t("li",[t("strong",[v._v("中介者模式")]),v._v("：聊天室、MVC模式、微服务通信。")]),v._v(" "),t("li",[t("strong",[v._v("解释器模式")]),v._v("：SQL解析、规则引擎、表达式求值。")]),v._v(" "),t("li",[t("strong",[v._v("访问者模式")]),v._v("：数据导出、代码生成、语法树遍历。")])]),v._v(" "),t("hr"),v._v(" "),t("h3",{attrs:{id:"✅-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#✅-总结"}},[v._v("#")]),v._v(" ✅ 总结")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("创建型模式")]),v._v(" → 解决对象创建问题，简化实例化过程。")]),v._v(" "),t("li",[t("strong",[v._v("结构型模式")]),v._v(" → 解决类和对象之间的组合，增强灵活性。")]),v._v(" "),t("li",[t("strong",[v._v("行为型模式")]),v._v(" → 解决对象间的通信与职责分配，提升扩展性。")])]),v._v(" "),t("h2",{attrs:{id:"企业开发中常用模式总结与选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#企业开发中常用模式总结与选择"}},[v._v("#")]),v._v(" 企业开发中常用模式总结与选择")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("类别")])]),v._v(" "),t("th",[t("strong",[v._v("模式名称")])]),v._v(" "),t("th",[t("strong",[v._v("核心目的")])]),v._v(" "),t("th",[t("strong",[v._v("主要应用场景")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("创建型模式")])]),v._v(" "),t("td",[v._v("单例模式 (Singleton)")]),v._v(" "),t("td",[v._v("保证唯一实例，节省资源")]),v._v(" "),t("td",[v._v("Spring Bean、数据库连接池、缓存客户端")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("创建型模式")])]),v._v(" "),t("td",[v._v("工厂方法/抽象工厂")]),v._v(" "),t("td",[v._v("解耦复杂对象的创建")]),v._v(" "),t("td",[v._v("数据库操作、支付系统、多消息队列适配")])]),v._v(" "),t("tr",[t("td"),v._v(" "),t("td"),v._v(" "),t("td"),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("结构型模式")])]),v._v(" "),t("td",[v._v("代理模式 (Proxy)")]),v._v(" "),t("td",[v._v("扩展增强、不改变原有代码")]),v._v(" "),t("td",[v._v("Spring AOP、RPC 调用、权限控制")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("结构型模式")])]),v._v(" "),t("td",[v._v("适配器模式 (Adapter)")]),v._v(" "),t("td",[v._v("兼容不同接口")]),v._v(" "),t("td",[v._v("支付接口、数据源切换、第三方 API 兼容")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("结构型模式")])]),v._v(" "),t("td",[v._v("装饰器模式 (Decorator)")]),v._v(" "),t("td",[v._v("动态增强功能")]),v._v(" "),t("td",[v._v("I/O 流处理、缓存增强、数据源监控")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("结构型模式")])]),v._v(" "),t("td",[v._v("外观模式 (Facade)")]),v._v(" "),t("td",[v._v("简化复杂系统的使用")]),v._v(" "),t("td",[v._v("订单处理、统一对外接口、微服务聚合")])]),v._v(" "),t("tr",[t("td"),v._v(" "),t("td"),v._v(" "),t("td"),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("行为型模式")])]),v._v(" "),t("td",[v._v("模板方法模式")]),v._v(" "),t("td",[v._v("固定算法骨架，灵活实现")]),v._v(" "),t("td",[v._v("数据导入导出、Spring JDBC Template")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("行为型模式")])]),v._v(" "),t("td",[v._v("策略模式 (Strategy)")]),v._v(" "),t("td",[v._v("可切换的算法")]),v._v(" "),t("td",[v._v("订单状态、支付策略、数据校验")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("行为型模式")])]),v._v(" "),t("td",[v._v("责任链模式")]),v._v(" "),t("td",[v._v("请求链式处理")]),v._v(" "),t("td",[v._v("权限校验、审批流、风控系统")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("行为型模式")])]),v._v(" "),t("td",[v._v("观察者模式 (Observer)")]),v._v(" "),t("td",[v._v("事件驱动、自动通知")]),v._v(" "),t("td",[v._v("Spring 事件、消息推送、数据同步")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("行为型模式")])]),v._v(" "),t("td",[v._v("命令模式 (Command)")]),v._v(" "),t("td",[v._v("封装请求，支持撤销与回滚")]),v._v(" "),t("td",[v._v("数据库事务、操作记录、异步任务")])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);